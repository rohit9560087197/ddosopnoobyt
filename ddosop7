import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, Entry
from mcpi.minecraft import Minecraft
import threading
import time
import os

# Global variables
mc = None
running = False
boats_joined = 0

# Lists to store IP addresses and names of Minecraft servers
servers_to_join = []
custom_names = []

# Function to scan a folder for text files containing IP addresses
def scan_folder_for_servers(folder_path, status_text):
    global servers_to_join
    try:
        servers_to_join = []
        for filename in os.listdir(folder_path):
            if filename.endswith(".txt"):
                file_path = os.path.join(folder_path, filename)
                with open(file_path, 'r') as file:
                    for line in file:
                        ip_address = line.strip()
                        if ip_address:
                            servers_to_join.append(ip_address)
        status_text.insert(tk.END, f"Found {len(servers_to_join)} servers in {folder_path}\n")
    except Exception as e:
        status_text.insert(tk.END, f"Error scanning folder: {e}\n")
        messagebox.showerror("Error", f"Error scanning folder: {e}")

# Function to handle name input and join servers
def handle_name_input(name_entry, status_text):
    global custom_names
    name = name_entry.get().strip()
    if name:
        custom_names.append(name)
        status_text.insert(tk.END, f"Added bot with custom name '{name}'\n")
        name_entry.delete(0, tk.END)  # Clear the entry field after adding the name
    else:
        messagebox.showerror("Error", "Please enter a custom name for the bot")

# Function to connect to Minecraft
def connect_to_minecraft(ip, port, status_text):
    global mc
    try:
        mc = Minecraft.create(ip, port)
        status_text.insert(tk.END, f"Connected to Minecraft server at {ip}:{port}\n")
        return mc  # Return the Minecraft object
    except Exception as e:
        status_text.insert(tk.END, f"Failed to connect to Minecraft server at {ip}:{port}: {e}\n")
        messagebox.showerror("Error", f"Failed to connect to Minecraft server at {ip}:{port}: {e}")
        return None  # Return None if connection fails

# Function to join a single server
def join_server(ip_port, status_text):
    global boats_joined
    try:
        ip, port = ip_port.split(":")
        mc = connect_to_minecraft(ip, int(port), status_text)
        if mc is not None:
            # Implement your bot logic here
            # Example: mc.player.setPos(x, y, z)
            time.sleep(5)  # Stay connected for 5 seconds (adjust as needed)
            mc.conn.close()  # Close the connection
            boats_joined += 1
            status_text.insert(tk.END, f"Joined server {ip}:{port}\n")
    except Exception as e:
        status_text.insert(tk.END, f"Error joining server {ip_port}: {e}\n")

# Function to start joining servers
def start_joining_servers(status_text):
    global running
    running = True
    combined_list = servers_to_join + custom_names
    for server in combined_list:
        if not running:
            break
        join_server(server, status_text)
        time.sleep(2)  # Delay between joining servers (adjust as needed)
    running = False

# Function to handle folder selection and scanning
def select_folder_and_scan(status_text):
    try:
        folder_path = filedialog.askdirectory()
        if folder_path:
            scan_folder_for_servers(folder_path, status_text)
    except Exception as e:
        status_text.insert(tk.END, f"Error selecting folder: {e}\n")
        messagebox.showerror("Error", f"Error selecting folder: {e}")

# Function to handle manual input of bot name
def input_bot_name(status_text, name_entry):
    # Clear the status text and entry field
    status_text.delete(1.0, tk.END)
    name_entry.delete(0, tk.END)
    
    # Create input label and entry field for bot name
    input_label = tk.Label(root, text="Enter custom bot name (e.g., bot-1, bot-2):")
    input_label.pack(pady=10)
    
    name_entry.pack()
    
    # Create "Submit" button
    submit_button = tk.Button(root, text="Submit", command=lambda: handle_name_input(name_entry, status_text))
    submit_button.pack(pady=10)
    
    # Create "Back" button to return to previous options
    back_button = tk.Button(root, text="Back", command=start_script)
    back_button.pack(pady=10)

# Function to stop joining servers
def stop_script():
    global running
    running = False
    messagebox.showinfo("Info", "Server joining stopped")

# Function to start the script
def start_script():
    global running, boats_joined
    running = True
    
    # Create main window for status display
    root = tk.Tk()
    root.title("Minecraft Server Joiner")
    
    # Create scrolled text widget for status updates
    status_text = scrolledtext.ScrolledText(root, width=60, height=10, wrap=tk.WORD)
    status_text.pack(padx=10, pady=10)
    
    # Create "Select Folder" button
    select_folder_button = tk.Button(root, text="Select Folder", command=lambda: select_folder_and_scan(status_text))
    select_folder_button.pack(pady=10)
    
    # Create "Input Name" button
    name_entry = tk.Entry(root, width=40)
    input_name_button = tk.Button(root, text="Input Custom Name", command=lambda: input_bot_name(status_text, name_entry))
    input_name_button.pack(pady=10)
    
    # Create "Stop" button
    stop_button = tk.Button(root, text="Stop", command=stop_script)
    stop_button.pack(pady=10)
    
    # Create thread to start joining servers
    threading.Thread(target=start_joining_servers, args=(status_text,)).start()
    
    root.mainloop()  # Start the tkinter main loop to keep the window open

# Main function to handle command-line execution
def main():
    start_script()

# Check if the script is run as main module
if __name__ == "__main__":
    main()
