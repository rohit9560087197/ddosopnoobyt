import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from mcpi.minecraft import Minecraft
import threading
import time

# Global variables
mc = None
running = False
boats_joined = 0

# List to store IP addresses of Minecraft servers
servers_to_join = []

# Function to append messages to the status text widget
def append_to_status(message):
    status_text.configure(state='normal')
    status_text.insert(tk.END, message + "\n")
    status_text.configure(state='disabled')
    status_text.see(tk.END)  # Scroll to the end

# Function to read IP addresses from a text file
def read_ips_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            ip_addresses = [line.strip() for line in file.readlines() if line.strip()]
            return ip_addresses
    except Exception as e:
        error_msg = f"Error reading file {file_path}: {e}"
        messagebox.showerror("Error", error_msg)
        append_to_status(error_msg)
        return []

# Function to handle manual entry of IP addresses
def manual_ip_entry():
    ip_entry = ip_entry_field.get()
    if ip_entry:
        servers_to_join.append(ip_entry)
        ip_entry_field.delete(0, tk.END)  # Clear the entry field
        append_to_status(f"Manually added IP address: {ip_entry}")
    else:
        messagebox.showwarning("Warning", "Please enter an IP address.")

# Function to connect to Minecraft
def connect_to_minecraft(ip, port):
    global mc
    try:
        mc = Minecraft.create(ip, port)
        append_to_status(f"Connected to Minecraft server at {ip}:{port}")
        return mc  # Return the Minecraft object
    except Exception as e:
        error_msg = f"Failed to connect to Minecraft server at {ip}:{port}: {e}"
        messagebox.showerror("Error", error_msg)
        append_to_status(error_msg)
        return None  # Return None if connection fails

# Function to join a single server
def join_server(ip_port):
    global boats_joined
    try:
        ip, port = ip_port.split(":")
        mc = connect_to_minecraft(ip, int(port))
        if mc is not None:
            # Implement your bot logic here
            # Example: mc.player.setPos(x, y, z)
            time.sleep(5)  # Stay connected for 5 seconds (adjust as needed)
            mc.conn.close()  # Close the connection
            boats_joined += 1
            append_to_status(f"Joined server {ip}:{port}")
    except Exception as e:
        append_to_status(f"Error joining server {ip_port}: {e}")

# Function to start joining servers
def start_joining_servers():
    global running
    running = True
    for server in servers_to_join:
        if not running:
            break
        join_server(server)
        time.sleep(2)  # Delay between joining servers (adjust as needed)
    running = False

# Function to stop joining servers
def stop_script():
    global running
    running = False
    append_to_status("Server joining stopped")

# Function to start the script
def start_script():
    global running, boats_joined
    running = True
    
    # Create main window for status display
    root = tk.Tk()
    root.title("Minecraft Server Joiner")
    
    # Create scrolled text widget for status updates
    global status_text
    status_text = scrolledtext.ScrolledText(root, width=60, height=10, wrap=tk.WORD)
    status_text.pack(padx=10, pady=10)
    status_text.configure(state='disabled')  # Make it read-only
    
    # Create manual IP entry widgets
    ip_entry_label = tk.Label(root, text="Enter IP address:")
    ip_entry_label.pack()
    
    global ip_entry_field
    ip_entry_field = tk.Entry(root, width=40)
    ip_entry_field.pack()
    
    add_ip_button = tk.Button(root, text="Add IP Manually", command=manual_ip_entry)
    add_ip_button.pack(pady=5)
    
    # Create "Upload IP File" button
    upload_button = tk.Button(root, text="Upload IP File", command=upload_ip_file)
    upload_button.pack(pady=10)
    
    # Create "Stop" button
    stop_button = tk.Button(root, text="Stop", command=stop_script)
    stop_button.pack(pady=10)
    
    # Create thread to start joining servers
    threading.Thread(target=start_joining_servers).start()
    
    root.mainloop()  # Start the tkinter main loop to keep the window open

# Main function to handle command-line execution
def main():
    start_script()

# Check if the script is run as main module
if __name__ == "__main__":
    main()
