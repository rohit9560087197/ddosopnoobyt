import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from mcpi.minecraft import Minecraft
import threading
import time

# Global variables
mc = None
running = False
boats_joined = 0
server_ip = ""
server_port = 0
bots_limit = 10  # Example value, should be set based on your use case
delay_time = 2.0  # Example value, should be set based on your use case

# List to store IP addresses of Minecraft servers to join (initially empty)
servers_to_join = []

# Function to append messages to the status text widget
def append_to_status(message):
    status_text.configure(state='normal')
    status_text.insert(tk.END, message + "\n")
    status_text.configure(state='disabled')
    status_text.see(tk.END)  # Scroll to the end

# Function to update status label with real-time information
def update_status_label():
    global boats_joined, bots_limit
    status_var.set(f"Bots joined: {boats_joined}/{bots_limit}")
    root.after(1000, update_status_label)  # Update every 1 second

# Function to update progress bar
def update_progress_bar():
    global boats_joined, bots_limit
    if bots_limit > 0:
        progress_bar["value"] = boats_joined * 100 / bots_limit
    root.after(1000, update_progress_bar)  # Update every 1 second

# Function to join a single server
def join_server(ip, port):
    global boats_joined
    try:
        mc = connect_to_minecraft(ip, port)
        if mc is not None:
            # Implement your bot logic here
            time.sleep(5)  # Simulating connection time
            mc.conn.close()  # Close the connection
            boats_joined += 1
            append_to_status(f"Joined server {ip}:{port}")
    except Exception as e:
        append_to_status(f"Error joining server {ip}:{port}: {e}")

# Function to start joining servers
def start_joining_servers():
    global running, boats_joined
    running = True
    for server in servers_to_join:
        if not running:
            break
        join_server(server["ip"], server["port"])
        time.sleep(delay_time)  # Delay between joining servers
    running = False

# Function to stop joining servers
def stop_joining():
    global running
    running = False
    stop_screen.destroy()  # Close the stop screen
    create_initial_screen()  # Go back to the initial setup screen

# Function to show the stop screen
def show_stop_screen():
    global stop_screen
    stop_screen = tk.Toplevel()
    stop_screen.title("Stop Joining Servers")

    stop_label = tk.Label(stop_screen, text="Server joining in progress.")
    stop_label.pack(padx=10, pady=10)

    stop_button = tk.Button(stop_screen, text="Stop Joining", width=15, command=stop_joining)
    stop_button.pack(pady=10)

# Function to connect to Minecraft
def connect_to_minecraft(ip, port):
    global mc
    try:
        mc = Minecraft.create(ip, int(port))
        append_to_status(f"Connected to Minecraft server at {ip}:{port}")
        return mc  # Return the Minecraft object
    except Exception as e:
        error_msg = f"Failed to connect to Minecraft server at {ip}:{port}: {e}"
        messagebox.showerror("Error", error_msg)
        append_to_status(error_msg)
        return None  # Return None if connection fails

# Function to handle Start button click
def handle_start():
    global server_ip, server_port, bots_limit, boats_joined

    # Validate input
    ip = ip_entry.get()
    port = port_entry.get()
    limit = limit_entry.get()

    if not ip or not port or not limit:
        messagebox.showerror("Error", "Please enter IP, Port, and Bot Limit.")
        return

    # Convert port and limit to integers
    try:
        port = int(port)
        limit = int(limit)
    except ValueError:
        messagebox.showerror("Error", "Port and Limit must be integers.")
        return

    # Set global variables
    server_ip = ip
    server_port = port
    bots_limit = limit

    # Append server to join to list
    servers_to_join.append({"ip": server_ip, "port": server_port})

    # Start script
    threading.Thread(target=start_script).start()

# Function to create initial setup screen
def create_initial_screen():
    global root, ip_entry, port_entry, limit_entry

    # Create main window
    root = tk.Tk()
    root.title("Minecraft Server Joiner - Setup")

    # IP Entry
    ip_label = tk.Label(root, text="Server IP:")
    ip_label.pack(pady=5)
    ip_entry = tk.Entry(root, width=30)
    ip_entry.pack()

    # Port Entry
    port_label = tk.Label(root, text="Server Port:")
    port_label.pack(pady=5)
    port_entry = tk.Entry(root, width=30)
    port_entry.pack()

    # Bot Limit Entry
    limit_label = tk.Label(root, text="Bot Limit:")
    limit_label.pack(pady=5)
    limit_entry = tk.Entry(root, width=30)
    limit_entry.pack()

    # Start Button
    start_button = tk.Button(root, text="Start Joining", width=15, command=handle_start)
    start_button.pack(pady=10)

    root.mainloop()

# Function to start the main script
def start_script():
    global boats_limit, delay_time, boats_joined

    # Create main window
    global root
    root = tk.Tk()
    root.title("Minecraft Server Joiner")

    # Progress bar to show joining progress
    global progress_bar
    progress_bar = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=300, mode='determinate')
    progress_bar.pack(padx=10, pady=10)

    # Status label to show current status
    global status_var
    status_var = tk.StringVar()
    status_label = tk.Label(root, textvariable=status_var)
    status_label.pack()

    # Text area for status updates
    global status_text
    status_text = scrolledtext.ScrolledText(root, width=60, height=10, wrap=tk.WORD)
    status_text.pack(padx=10, pady=10)
    status_text.configure(state='disabled')  # Make it read-only

    # Start joining servers
    threading.Thread(target=start_joining_servers).start()

    # Update status label and progress bar
    update_status_label()
    update_progress_bar()

    root.mainloop()

# Main function to handle command-line execution
def main():
    create_initial_screen()

# Check if the script is run as main module
if __name__ == "__main__":
    main()
