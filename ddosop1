import tkinter as tk
import requests
import threading

# Global variables
generation_running = False
thread = None

# Function to send message to Discord via webhook
def send_discord_message(webhook_url, message):
    headers = {
        'Content-Type': 'application/json'
    }
    data = {
        'content': message
    }
    response = requests.post(webhook_url, headers=headers, json=data)
    return response.status_code

# Function to start message generation
def start_generation():
    global generation_running, thread
    if not generation_running:
        generation_running = True
        thread = threading.Thread(target=generate_and_send_messages)
        thread.start()
        status_label.config(text="Message generation started...", fg="blue")

# Function to stop message generation
def stop_generation():
    global generation_running, thread
    generation_running = False
    if thread and thread.is_alive():
        thread.join()  # Wait for the thread to finish
    status_label.config(text="Message generation stopped.", fg="orange")

# Function to generate and send messages
def generate_and_send_messages():
    webhook_url = webhook_entry.get().strip()
    message = message_entry.get("1.0", tk.END).strip()

    if webhook_url and message:
        lines = message.splitlines()
        for line in lines:
            if not generation_running:
                break
            line = line.strip()
            if line:
                status = send_discord_message(webhook_url, line)
                if status == 204:
                    status_label.config(text=f"Message sent successfully: {line}", fg="green")
                else:
                    status_label.config(text=f"Failed to send message: {line}. Status code: {status}", fg="red")
                time.sleep(1)  # Adjust as needed for rate limiting or speed
    else:
        status_label.config(text="Please enter both webhook URL and message.", fg="red")
    generation_running = False

# Create main window
root = tk.Tk()
root.title("Discord Message Sender")

# Create and place widgets
tk.Label(root, text="Enter Webhook URL:").pack(pady=5)
webhook_entry = tk.Entry(root, width=50)
webhook_entry.pack()

tk.Label(root, text="Enter Message:").pack(pady=5)
message_entry = tk.Text(root, width=50, height=10)
message_entry.pack()

send_button = tk.Button(root, text="Send Message", command=lambda: threading.Thread(target=start_generation).start())
send_button.pack(pady=5)

start_button = tk.Button(root, text="Start Generation", command=start_generation)
start_button.pack(pady=5)

stop_button = tk.Button(root, text="Stop Generation", command=stop_generation)
stop_button.pack(pady=5)

status_label = tk.Label(root, text="", fg="black")
status_label.pack(pady=5)

root.mainloop()
