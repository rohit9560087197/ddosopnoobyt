import os
import requests
import random
import threading
import json
import time
from tkinter import Tk, Label, Entry, Button, scrolledtext, filedialog
import urllib3

# Disable SSL warnings (not recommended for production use)
urllib3.disable_warnings()

# Global variables
generation_running = False
console_lock = threading.Lock()
current_proxy = None

# Ensure required directories and files exist
os.makedirs('config', exist_ok=True)
if not os.path.isfile('config/proxies.txt'):
    open('config/proxies.txt', 'w').close()
if not os.path.isfile('config/config.json'):
    with open('config/config.json', 'w') as f:
        json.dump({
            "proxies": "http",
            "webhook": {
                "url": "",
                "username": "Nitro Generator",
                "avatar": ""
            },
            "thread": "10"
        }, f, indent=4)

def center(var: str, space: int = None):
    if not space:
        space = (os.get_terminal_size().columns - len(var.splitlines()[int(len(var.splitlines()) / 2)])) / 2
    return "\n".join((' ' * int(space)) + var for var in var.splitlines())

class Console():
    def printer(self, status, code):
        with console_lock:
            output_text.insert('end', f"{status} > discord.gift/{code}\n")
            output_text.see('end')

class Worker():
    def __init__(self):
        self.proxies = []
        self.proxy_index = 0  # To keep track of the current proxy index

    def load_proxies_from_file(self, filename):
        with open(filename, 'r') as f:
            self.proxies = [line.strip() for line in f]

    def get_next_proxy(self):
        if not self.proxies:
            return None
        self.proxy_index = (self.proxy_index + 1) % len(self.proxies)
        return self.proxies[self.proxy_index]

    def run_with_proxy(self):
        global generation_running, current_proxy
        while generation_running:
            self.code = "".join(random.choice("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890") for _ in range(16))
            try:
                proxies = current_proxy or self.get_next_proxy()
                if proxies:
                    proxy_dict = {'http': 'http://' + proxies, 'https': 'https://' + proxies}
                    req = requests.get(
                        f'https://discordapp.com/api/v6/entitlements/gift-codes/{self.code}?with_application=false&with_subscription_plan=true',
                        proxies=proxy_dict,
                        timeout=1,  # Set a very low timeout for quick responses
                        verify=False  # Disable SSL verification
                    )
                    if req.status_code == 200:
                        Console().printer("Valid", self.code)
                        with open('results/hit.txt', 'a+') as f:
                            f.write(self.code + "\n")
                        try:
                            webhook_url = webhook_entry.get().strip()
                            if webhook_url:
                                response = requests.post(
                                    webhook_url,
                                    json={"content": f"||@here|| **__New Valid Nitro !!__**\n\nhttps://discord.gift/{self.code}",
                                          "username": "Nitro Generator",
                                          "avatar_url": ""}
                                )
                                if response.status_code != 204:  # 204 No Content is the expected response for a successful request
                                    output_text.insert('end', f"Failed to send to webhook: {response.status_code} {response.text}\n")
                                    output_text.see('end')
                            else:
                                output_text.insert('end', "Webhook URL is empty.\n")
                                output_text.see('end')
                        except Exception as e:
                            output_text.insert('end', f"Exception when sending to webhook: {str(e)}\n")
                            output_text.see('end')
                    elif req.status_code == 404:
                        Console().printer("Invalid", self.code)
                    elif req.status_code == 429:
                        Console().printer("RTlimit", self.code)
                        time.sleep(int(delay_entry.get()))
                    else:
                        Console().printer("Retry", self.code)
                else:
                    Console().printer("NoProxy", self.code)
                    output_text.insert('end', "No proxy available.\n")
                    output_text.see('end')
                    time.sleep(5)  # Wait for 5 seconds before retrying when no proxy available
            except requests.exceptions.ProxyError:
                Console().printer("ProxyError", self.code)
                output_text.insert('end', f"Failed to connect to proxy.\n")
                output_text.see('end')
            except requests.exceptions.ConnectTimeout:
                Console().printer("Timeout", self.code)
                output_text.insert('end', f"Connection timeout while connecting to proxy.\n")
                output_text.see('end')
            except KeyboardInterrupt:
                with console_lock:
                    output_text.insert('end', "Nitro Gen Stopped by Keyboard Interrupt.\n")
                    output_text.see('end')
                break
            except Exception as e:
                Console().printer("Retry", self.code)
                output_text.insert('end', f"Exception during request: {str(e)}\n")
                output_text.see('end')

def start_generation():
    global generation_running
    if not generation_running:
        generation_running = True
        threading.Thread(target=DNG.run_with_proxy).start()
        status_label.config(text="Message generation started...", fg="blue")

def stop_generation():
    global generation_running
    generation_running = False
    status_label.config(text="Message generation stopped.", fg="orange")

def upload_proxies():
    filename = filedialog.askopenfilename(initialdir=os.getcwd(), title="Select Proxy File", filetypes=(("Text files", "*.txt"), ("All files", "*.*")))
    if filename:
        DNG.load_proxies_from_file(filename)
        status_label.config(text=f"Loaded {len(DNG.proxies)} proxies from {filename}", fg="green")
    else:
        status_label.config(text="Proxy file upload cancelled.", fg="red")

# Create main window
root = Tk()
root.title("Discord Nitro Generator")

# Create and place widgets
Label(root, text="Discord Webhook URL:").pack(pady=5)
webhook_entry = Entry(root, width=50)
webhook_entry.pack()

Label(root, text="Delay (seconds):").pack(pady=5)
delay_entry = Entry(root, width=10)
delay_entry.pack()
delay_entry.insert(0, "0")  # Set delay to 0 seconds for minimal delay

Label(root, text="Generated Codes:").pack(pady=5)
output_text = scrolledtext.ScrolledText(root, width=50, height=10)
output_text.pack(padx=10, pady=10)

upload_button = Button(root, text="Upload Proxies", command=upload_proxies)
upload_button.pack(pady=5)

start_button = Button(root, text="Start Generation", command=start_generation)
start_button.pack(pady=5)

stop_button = Button(root, text="Stop Generation", command=stop_generation)
stop_button.pack(pady=5)

status_label = Label(root, text="", fg="black")
status_label.pack(pady=5)

# Initialize the console and worker
console = Console()
DNG = Worker()

# Start the Tkinter event loop
root.mainloop()
