import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from mcpi.minecraft import Minecraft
import threading
import time

# Global variables
mc = None
running = False
boats_joined = 0
server_ip = ""
server_port = 0
bots_limit = 0
delay_time = 0
servers_to_join = []  # List to store IP addresses of Minecraft servers

# Function to append messages to the status text widget
def append_to_status(message):
    status_text.configure(state='normal')
    status_text.insert(tk.END, message + "\n")
    status_text.configure(state='disabled')
    status_text.see(tk.END)  # Scroll to the end

# Function to handle manual entry of IP and Port
def set_ip_and_port():
    global server_ip, server_port
    ip = ip_entry_field.get()
    port = port_entry_field.get()
    if ip and port:
        server_ip = ip
        server_port = int(port)
        append_to_status(f"Server IP set to: {server_ip}, Port set to: {server_port}")
        ip_entry_field.delete(0, tk.END)  # Clear the entry fields
        port_entry_field.delete(0, tk.END)
    else:
        messagebox.showwarning("Warning", "Please enter both IP address and port.")

# Function to handle bots limit entry
def set_bots_limit():
    global bots_limit
    try:
        bots_limit = int(bots_limit_entry.get())
        append_to_status(f"Bots limit set to: {bots_limit}")
        bots_limit_entry.delete(0, tk.END)  # Clear the entry field
    except ValueError:
        messagebox.showwarning("Warning", "Please enter a valid number for bots limit.")

# Function to handle delay time entry
def set_delay_time():
    global delay_time
    try:
        delay_time = float(delay_entry.get())
        append_to_status(f"Delay time set to: {delay_time}")
        delay_entry.delete(0, tk.END)  # Clear the entry field
    except ValueError:
        messagebox.showwarning("Warning", "Please enter a valid number for delay time.")

# Function to upload IP addresses from a text file
def upload_ip_file():
    global servers_to_join
    file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if file_path:
        with open(file_path, 'r') as file:
            servers_to_join = file.read().strip().split('\n')
        append_to_status(f"Uploaded {len(servers_to_join)} IP addresses from file: {file_path}")

# Function to connect to Minecraft
def connect_to_minecraft(ip, port):
    try:
        mc = Minecraft.create(ip, port)
        append_to_status(f"Connected to Minecraft server at {ip}:{port}")
        return mc  # Return the Minecraft object
    except Exception as e:
        error_msg = f"Failed to connect to Minecraft server at {ip}:{port}: {e}"
        messagebox.showerror("Error", error_msg)
        append_to_status(error_msg)
        return None  # Return None if connection fails

# Function to join a single server
def join_server(ip_port):
    global boats_joined
    try:
        ip, port = ip_port.split(":")
        mc = connect_to_minecraft(ip, port)
        if mc is not None:
            # Implement your bot logic here
            # Example: mc.player.setPos(x, y, z)
            time.sleep(5)  # Stay connected for 5 seconds (adjust as needed)
            mc.conn.close()  # Close the connection
            boats_joined += 1
            append_to_status(f"Joined server {ip}:{port}")
    except Exception as e:
        append_to_status(f"Error joining server {ip_port}: {e}")

# Function to start joining servers
def start_joining_servers():
    global running
    running = True
    for server in servers_to_join:
        if not running:
            break
        join_server(server)
        time.sleep(delay_time)  # Delay between joining servers
    running = False

# Function to stop joining servers
def stop_joining():
    global running
    running = False
    stop_screen.destroy()  # Close the stop screen
    create_initial_screen()  # Go back to the initial setup screen

# Function to show the stop screen
def show_stop_screen():
    global stop_screen
    stop_screen = tk.Toplevel()
    stop_screen.title("Stop Joining Servers")

    stop_label = tk.Label(stop_screen, text="Server joining in progress.")
    stop_label.pack(padx=10, pady=10)

    stop_button = tk.Button(stop_screen, text="Stop Joining", width=15, command=stop_joining)
    stop_button.pack(pady
