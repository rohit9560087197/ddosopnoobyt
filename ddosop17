import tkinter as tk
from tkinter import ttk, scrolledtext, simpledialog
from mcpi.minecraft import Minecraft
import threading
import time
import random

# Global variables
mc = None
running = False
boats_joined = 0
bots_limit = 10  # Example value, adjust as needed
delay_time = 2.0  # Example value, adjust as needed

# Function to generate a random bot IP address in the format x.x.x.x:port
def generate_random_bot_ip():
    ip_parts = [random.randint(0, 255) for _ in range(4)]
    port = random.randint(1000, 9999)
    ip_address = f"{ip_parts[0]}.{ip_parts[1]}.{ip_parts[2]}.{ip_parts[3]}:{port}"
    return ip_address

# Function to join a server with a unique name
def join_server(server_ip, server_port):
    global boats_joined
    try:
        bot_ip = generate_random_bot_ip()
        name = f"bot-{boats_joined + 1}-{bot_ip.replace(':', '')}"
        mc = Minecraft.create(server_ip, server_port)
        mc.postToChat(f"Joining as {name}")  # Display name in Minecraft chat
        time.sleep(5)  # Simulate connection time
        mc.conn.close()  # Close the connection
        boats_joined += 1
        append_to_status(f"Joined server {server_ip}:{server_port} as {name}")
    except Exception as e:
        append_to_status(f"Error joining server {server_ip}:{server_port}: {e}")

# Function to start joining servers
def start_joining_servers(server_ip, server_port):
    global running, boats_joined
    running = True
    for _ in range(bots_limit):
        if not running:
            break
        join_server(server_ip, server_port)
        time.sleep(delay_time)  # Delay between joining servers
    running = False

# GUI Functions

# Function to handle start button click
def start_button_click():
    global bots_limit, delay_time

    # Ask for server IP and port using dialogs
    server_ip = simpledialog.askstring("Server IP", "Enter Minecraft Server IP Address:")
    server_port = simpledialog.askinteger("Server Port", "Enter Minecraft Server Port:")

    if server_ip and server_port:
        # Create main window
        global root
        root = tk.Tk()
        root.title("Minecraft Server Joiner")

        # Progress bar to show joining progress
        global progress_bar
        progress_bar = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=300, mode='determinate')
        progress_bar.pack(padx=10, pady=10)

        # Status label to show current status
        global status_var
        status_var = tk.StringVar()
        status_label = tk.Label(root, textvariable=status_var)
        status_label.pack()

        # Text area for status updates
        global status_text
        status_text = scrolledtext.ScrolledText(root, width=60, height=10, wrap=tk.WORD)
        status_text.pack(padx=10, pady=10)
        status_text.configure(state='disabled')  # Make it read-only

        # Start joining servers
        threading.Thread(target=start_joining_servers, args=(server_ip, server_port)).start()

        # Update status label and progress bar
        update_status_label()
        update_progress_bar()

        root.mainloop()

# Function to append messages to the status text widget
def append_to_status(message):
    status_text.configure(state='normal')
    status_text.insert(tk.END, message + "\n")
    status_text.configure(state='disabled')
    status_text.see(tk.END)  # Scroll to the end

# Function to update status label with real-time information
def update_status_label():
    global boats_joined, bots_limit
    status_var.set(f"Bots joined: {boats_joined}/{bots_limit}")
    root.after(1000, update_status_label)  # Update every 1 second

# Function to update progress bar
def update_progress_bar():
    global boats_joined, bots_limit
    if bots_limit > 0:
        progress_bar["value"] = boats_joined * 100 / bots_limit
    root.after(1000, update_progress_bar)  # Update every 1 second

# Main function to handle command-line execution
def main():
    # Create main window for entering server IP and port
    global root
    root = tk.Tk()
    root.title("Minecraft Server Joiner")

    # Start button
    start_button = tk.Button(root, text="Start Joining", command=start_button_click)
    start_button.pack(pady=10)

    root.mainloop()

# Check if the script is run as main module
if __name__ == "__main__":
    main()
