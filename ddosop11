import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from mcpi.minecraft import Minecraft
import threading
import time

# Global variables
mc = None
running = False
boats_joined = 0
server_ip = ""
server_port = 0
bots_limit = 0
delay_time = 0
servers_to_join = []  # List to store IP addresses of Minecraft servers

# Function to append messages to the status text widget
def append_to_status(message):
    status_text.configure(state='normal')
    status_text.insert(tk.END, message + "\n")
    status_text.configure(state='disabled')
    status_text.see(tk.END)  # Scroll to the end

# Function to handle manual entry of IP and Port
def set_ip_and_port():
    global server_ip, server_port
    ip = ip_entry_field.get()
    port = port_entry_field.get()
    if ip and port:
        server_ip = ip
        server_port = int(port)
        append_to_status(f"Server IP set to: {server_ip}, Port set to: {server_port}")
        ip_entry_field.delete(0, tk.END)  # Clear the entry fields
        port_entry_field.delete(0, tk.END)
    else:
        messagebox.showwarning("Warning", "Please enter both IP address and port.")

# Function to handle bots limit entry
def set_bots_limit():
    global bots_limit
    try:
        bots_limit = int(bots_limit_entry.get())
        append_to_status(f"Bots limit set to: {bots_limit}")
        bots_limit_entry.delete(0, tk.END)  # Clear the entry field
    except ValueError:
        messagebox.showwarning("Warning", "Please enter a valid number for bots limit.")

# Function to handle delay time entry
def set_delay_time():
    global delay_time
    try:
        delay_time = float(delay_entry.get())
        append_to_status(f"Delay time set to: {delay_time}")
        delay_entry.delete(0, tk.END)  # Clear the entry field
    except ValueError:
        messagebox.showwarning("Warning", "Please enter a valid number for delay time.")

# Function to read IP addresses from a text file
def read_ips_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            ip_addresses = [line.strip() for line in file.readlines() if line.strip()]
            return ip_addresses
    except Exception as e:
        error_msg = f"Error reading file {file_path}: {e}"
        messagebox.showerror("Error", error_msg)
        append_to_status(error_msg)
        return []

# Function to handle uploading IP addresses from a file
def upload_ip_file():
    try:
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if file_path:
            ips = read_ips_from_file(file_path)
            servers_to_join.extend(ips)
            append_to_status(f"Uploaded {len(ips)} IP addresses from {file_path}")
    except Exception as e:
        error_msg = f"Error uploading file: {e}"
        messagebox.showerror("Error", error_msg)
        append_to_status(error_msg)

# Function to connect to Minecraft
def connect_to_minecraft():
    global mc, server_ip, server_port
    try:
        mc = Minecraft.create(server_ip, server_port)
        append_to_status(f"Connected to Minecraft server at {server_ip}:{server_port}")
        return mc  # Return the Minecraft object
    except Exception as e:
        error_msg = f"Failed to connect to Minecraft server at {server_ip}:{server_port}: {e}"
        messagebox.showerror("Error", error_msg)
        append_to_status(error_msg)
        return None  # Return None if connection fails

# Function to join a single server
def join_server(ip_port):
    global boats_joined
    try:
        ip, port = ip_port.split(":")
        mc = connect_to_minecraft()
        if mc is not None:
            # Implement your bot logic here
            # Example: mc.player.setPos(x, y, z)
            time.sleep(5)  # Stay connected for 5 seconds (adjust as needed)
            mc.conn.close()  # Close the connection
            boats_joined += 1
            append_to_status(f"Joined server {ip}:{port}")
    except Exception as e:
        append_to_status(f"Error joining server {ip_port}: {e}")

# Function to start joining servers
def start_joining_servers():
    global running
    running = True
    for server in servers_to_join:
        if not running:
            break
        join_server(server)
        time.sleep(delay_time)  # Delay between joining servers
    running = False

# Function to stop joining servers
def stop_script():
    global running
    running = False
    append_to_status("Server joining stopped")

# Function to hide the initial screen and start the main script
def start_main_script():
    initial_screen.destroy()  # Destroy the initial screen
    start_script()

# Function to create the initial screen
def create_initial_screen():
    global initial_screen
    initial_screen = tk.Tk()
    initial_screen.title("Minecraft Server Joiner")

    ip_label = tk.Label(initial_screen, text="Enter the Minecraft server IP:")
    ip_label.pack(pady=10)

    global ip_entry_field
    ip_entry_field = tk.Entry(initial_screen, width=40)
    ip_entry_field.pack()

    port_label = tk.Label(initial_screen, text="Enter the Minecraft server port:")
    port_label.pack(pady=10)

    global port_entry_field
    port_entry_field = tk.Entry(initial_screen, width=10)
    port_entry_field.pack()

    start_button = tk.Button(initial_screen, text="Set IP and Port", width=15, command=set_ip_and_port)
    start_button.pack(pady=10)

    bots_limit_label = tk.Label(initial_screen, text="Enter bots limit:")
    bots_limit_label.pack(pady=5)

    global bots_limit_entry
    bots_limit_entry = tk.Entry(initial_screen, width=10)
    bots_limit_entry.pack()

    bots_limit_button = tk.Button(initial_screen, text="Set Bots Limit", width=15, command=set_bots_limit)
    bots_limit_button.pack(pady=5)

    delay_label = tk.Label(initial_screen, text="Enter delay time (in seconds):")
    delay_label.pack(pady=5)

    global delay_entry
    delay_entry = tk.Entry(initial_screen, width=10)
    delay_entry.pack()

    delay_button = tk.Button(initial_screen, text="Set Delay Time", width=15, command=set_delay_time)
    delay_button.pack(pady=5)

    # Upload IP file button
    upload_button = tk.Button(initial_screen, text="Upload IP File", width=15, command=upload_ip_file)
    upload_button.pack(pady=10)

    # Start script button
    start_main_button = tk.Button(initial_screen, text="Start Script", width=15, command=start_main_script)
    start_main_button.pack(pady=10)

    initial_screen.mainloop()

# Function to start the main script
def start_script():
    global running, boats_joined, bots_limit, delay_time
    running = True
    
    # Create main window for status display
    root = tk.Tk()
    root.title("Minecraft Server Joiner")
    
    # Create scrolled text widget for status updates
    global status_text
    status_text = scrolledtext.ScrolledText(root, width=60, height=10, wrap=tk.WORD)
    status_text.pack(padx=10, pady=10)
    status_text.configure(state='disabled')  # Make it read-only
    
    # Display bots limit and delay time settings
    append_to_status(f"Bots limit set to: {bots_limit}")
    append_to_status(f"Delay time set to: {delay_time} seconds")
    
    # Create "Upload IP File" button
    upload_button = tk.Button(root, text="Upload IP File", command=upload_ip_file)
    upload_button.pack(pady=10)
    
    # Create "Stop" button
    stop_button = tk.Button(root, text="Stop", command=stop_script)
    stop_button.pack(pady=10)
    
    # Create thread to start joining servers
    threading.Thread(target=start_joining_servers).start()
    
    root.mainloop()  # Start the tkinter main loop to keep the window open

# Main function to handle command-line execution
def main():
    create_initial_screen()

# Check if the script is run as main module
if __name__ == "__main__":
    main()
